#compdef zplugin
#autoload

#
# Completes zplugin.
#
# Authors:
#   laggardkernel <laggardkernel@gmail.com>
#

_zplugin_plg_spec() {
  local IFS=$'\n\t'
  case $words[1] in
    (load|light|unload|update|status|report|delete|cd|create|edit|glance|stress|changes|creinstall|cuninstall|compile|uncompile|recall)
      local -a plugins
      plugins=($(zplugin times|sed 's/\x1b\[[0-9;]*m//g'|cut -d ' ' -f4))
      _arguments "*:plugins:($plugins)"
    ;;
    (cdisable)
      local -a cnames
      cnames=($ZPLGM[COMPLETIONS_DIR]/_*)
      cnames=("${cnames[@]##*/_}") # cnames=("${cnames[@]%%.*}")
      _arguments "*:completion names:($cnames)"
    ;;
    (cenable)
      local -a cnames
      cnames=($ZPLGM[COMPLETIONS_DIR]/[!_]*)
      cnames=("${cnames[@]##*/}")
      _arguments "*:completion names:($cnames)"
    ;;
  esac
}

_zplugin() {
  local -a commands

  commands=(
    "-h:usage information"
    "--help:usage information"
    "help:usage information"
    "man:manual"
    "self-update:updates and compiles Zplugin"
    "times:statistics on plugin load times, sorted in order of loading"
    "zstatus:overall Zplugin status"
    "load:load plugin, can also receive absolute local path"
    "light:light plugin load, without reporting/tracking (-b - do track but bindkey-calls only)"
    "unload:unload plugin loaded with \`zplugin load ...', -q - quiet"
    "snippet:source local or remote file (by direct URL), -f: force - don't use cache"
    "ls:list snippets in formatted and colorized manner"
    'ice:add ICE to next command, argument is e.g. from"gitlab"'
    "update:Git update plugin or snippet (or all plugins and snippets if --all passed); besides -q accepts also --quiet"
    "status:Git status for plugin or svn status for snippet (or for all those if --all passed)"
    "report:show plugin's report (or all plugins' if --all passed)"
    "delete:remove plugin or snippet from disk (good to forget wrongly passed ice-mods)"
    "loaded:show what plugins are loaded (filter with 'keyword')"
    "list:show what plugins are loaded (filter with 'keyword')"
    "cd:cd into plugin's directory; also support snippets, if feed with URL"
    "create:create plugin (also together with Github repository)"
    "edit:edit plugin's file with \$EDITOR"
    "glance:look at plugin's source (pygmentize, {,source-}highlight)"
    "stress:test plugin for compatibility with set of options"
    "changes:view plugin's git log"
    "recently:show plugins that changed recently, argument is e.g. 1 month 2 days"
    "clist:list completions in use"
    "completions:list completions in use"
    "cdisable:disable completion \`cname'"
    "cenable:enable completion \`cname'"
    "creinstall:install completions for plugin, can also receive absolute local path; -q - quiet"
    "cuninstall:uninstall completions for plugin"
    "csearch:search for available completions from any plugin"
    "compinit:refresh installed completions"
    "dtrace:start tracking what's going on in session"
    "dstart:start tracking what's going on in session"
    "dstop:stop tracking what's going on in session"
    "dunload:revert changes recorded between dstart and dstop"
    "dreport:report what was going on in session"
    "dclear:clear report of what was going on in session"
    "compile:compile plugin (or all plugins if --all passed)"
    "uncompile:remove compiled version of plugin (or of all plugins if --all passed)"
    "compiled:list plugins that are compiled"
    "cdlist:show compdef replay list"
    "cdreplay:replay compdefs (to be done after compinit), -q - quiet"
    "cdclear:clear compdef replay list, -q - quiet"
    "srv:control a service, command can be: stop,start,restart,next,quit; \`next' moves the service to another Zshell"
    "recall:fetch saved ice modifiers and construct \`zplugin ice ...' command"
    "env-whitelist:allows to specify names (also patterns) of variables left unchanged during an unload. -v - verbose"
    "bindkeys:lists bindkeys set up by each plugin"
    "module:manage binary Zsh module shipped with Zplugin, see \`zplugin module help"
  )

  _arguments -C \
    '1:cmd:->cmds' \
    '*:: :->args' \

  case "$state" in
    (cmds)
      _describe -t commands 'commands' commands
      ;;
    (*)
      _zplugin_plg_spec
      ;;
  esac
}

_zplugin
